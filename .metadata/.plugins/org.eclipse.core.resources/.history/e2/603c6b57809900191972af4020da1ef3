google.load('visualization', '1.0', {'packages':['controls','gauge','corechart']});

var scadaRefId = 0;
$(function(){
    getReferences();  
});

google.setOnLoadCallback(drawDashboards);

var scada = {};
var poll = true;
var chartPoll;
var now = new Date();
var nowWrapper = moment(now);
var today = nowWrapper.format('YYYY-MM-DD[T]HH:MM:[00Z]');
var yesterday = nowWrapper.clone().subtract('days', 1).format('YYYY-MM-DD[T]HH:MM:[00Z]');
var sixDaysAgo = nowWrapper.clone().subtract('days', 6).format('YYYY-MM-DD[T]HH:MM:[00Z]');
var sixtyTwo = nowWrapper.clone().subtract('days', 60).format('YYYY-MM-DD[T]HH:MM:[00Z]');
var twelveMonthsAgo = nowWrapper.clone().subtract('months', 12).format('YYYY-MM-DD[T]HH:MM:[00Z]');
var url = {
	group: (Consert.ctxPath || '') + "/json/power/availablePower",
	scada: (Consert.ctxPath || '') + '/json/multiscada/getScadaFeedData?id='+scadaRefId
};
// Auto Event
var settings, saveInit = false, saving = false;

$(function(){
	$('#toggleFilters').click(function(){
		if(poll){
			poll = false;
			clearTimeout( chartPoll );
			drawDashboards();
		}else{
			poll = true;
			drawDashboards();
		}
	});
	
	//initSCADA();
});

function getReferences(){
	addScadaReferenceWindow();
	$.get((Consert.ctxPath || '') + '/json/multiscada/references', function() {

	}).done(function(response) {
		if (response.success) {
			var jsonScadaRef = jQuery.parseJSON(response.data);
			var i=0;
			$.each(jsonScadaRef, function(idx, val) {
				
				$("#scadaRefs").append(new Option(val.name, val.id));
			
			});

			if (jsonScadaRef.length > 0) {
				$("#scadaRefs").val($("#scadaRefs option:first").val()).change();				
				url.scada=(Consert.ctxPath || '') + '/json/multiscada/getScadaFeedData?id='+$("#scadaRefs").val();
				initSCADA();
			} else {
				$("#scadaRefs").append(new Option("None", "-1"));	
			}
			
		} else {			
			$("#scadaRefs").append(new Option("None", "-1"));			
		}
		
		//initSCADA();
	}).fail(function(error) {
		$("#scadaRefs").append(new Option("None", "-1"));
		console.log(error);
	});
}

function addScadaReferenceWindow() {
	var $elem = $('#scadaReference');
	$('<label />').css({
		"color" : "#707070",
		"font-weight" : "bold",
		"font-size" : "1.17em"
	}).html("SCADA Reference<br/><br/>").appendTo($elem);
	$('<select />').attr('id', 'scadaRefs').addClass('inputboxDash filterType').change(function() {		
		 scadaRefId = $("#scadaRefs").val(); // store the dynamic value of 
		// select option
	     $( "#scadaRefs" ).find( 'option[value="' + scadaRefId + '"]' ).prop( "selected", true );
		url.scada=(Consert.ctxPath || '') + '/json/multiscada/getScadaFeedData?id='+scadaRefId;
		initSCADA();
	}).appendTo($elem);
	
}

function drawDashboards() {
	drawGroupDashboard();
	if(poll){
		chartPoll = setTimeout(function(){drawDashboards();}, i18n('lang.js.dashboard.availablePowerRefreshRateSeconds') * 1000);
	}else{
		clearTimeout( chartPoll );
	}
}

// Temporary until JSON is updated to Google format
function drawGroupDashboard() {
	var group = $.ajax({
		url: url.group,
		dataType:"json",
		async: true,
		success: function(res){
			if(res.success == true){ 
				// Group Overview Dashboard
				var groupData = new google.visualization.DataTable();
				groupData.addColumn('string','Group');
				groupData.addColumn('number','System Power');
				groupData.addColumn('number','Group Power');
				groupData.addColumn('number','TSTAT Count');
				groupData.addColumn('number','TSTAT Power');
				groupData.addColumn('number','WH Count');
				groupData.addColumn('number','WH Power');
				groupData.addColumn('number','PP Count');
				groupData.addColumn('number','PP Power');
				groupData.addColumn('number','EV Count');
				groupData.addColumn('number','EV Power');
				groupData.addColumn('number','IRRIGATION PUMP Count');
				groupData.addColumn('number','IRRIGATION PUMP Power');
				groupData.addColumn('number','AC SWITCH Count');
				groupData.addColumn('number','AC SWITCH Power');
				groupData.addColumn('number','CROP HEAT Count');
				groupData.addColumn('number','CROP HEAT Power');
				groupData.addColumn('number','GENERATOR Count');
				groupData.addColumn('number','GENERATOR Power');
				groupData.addColumn('number','SINGLE HEAT Count');
				groupData.addColumn('number','SINGLE HEAT Power');
				groupData.addColumn('number','DUAL HEAT Count');
				groupData.addColumn('number','DUAL HEAT Power');
				groupData.addColumn('number','STORAGE WATER HEATER Count');
				groupData.addColumn('number','STORAGE WATER HEATER Power');
				groupData.addColumn('number','STORAGE HEAT Count');
				groupData.addColumn('number','STORAGE HEAT Power');
				groupData.addColumn('number','ELECTRIC VEHICLE CHARGER Count');
				groupData.addColumn('number','ELECTRIC VEHICLE CHARGER Power');
				groupData.addColumn('number','ELECTRIC VEHICLE CHARGER STORAGE Count');
				groupData.addColumn('number','ELECTRIC VEHICLE CHARGER STORAGE Power');
				var r = 0;
				$.each(res.data.groupPowerList, function(index, value) {
					var groupKw = 0;
					groupData.addRow();
					groupData.setCell(r, 0, value.name);
					
					// System Power
					if(res.data.powerAvailable > 1000000000){
						groupData.setCell(r, 1, res.data.powerAvailable / 1000000000, res.data.powerAvailable / 1000000000 + ' GW');
					}else if(res.data.powerAvailable > 1000000){
						groupData.setCell(r, 1, res.data.powerAvailable / 1000000, res.data.powerAvailable / 1000000 + ' MW');
					}else if(res.data.powerAvailable > 1000){
						groupData.setCell(r, 1, res.data.powerAvailable / 1000, res.data.powerAvailable / 1000 + ' kW');
					}else{
						groupData.setCell(r, 1, res.data.powerAvailable, res.data.powerAvailable + ' W');
					}
					
					// Power by Device Type
					$.each(value.powerAvailByDeviceTypeID, function(kwIndex, kwValue){
						if(kwIndex == 'TSTAT'){
							c = 4;
						}else if(kwIndex == 'WH'){
							c = 6;
						}else if(kwIndex == 'PP'){
							c = 8;
						}else if(kwIndex == 'EV'){
							c = 10;
						}else if(kwIndex == 'IRRIGATION PUMP'){
							c = 12;
						}else if(kwIndex == 'AC SWITCH'){
							c = 14;
						}else if(kwIndex == 'CROP HEAT'){
							c = 16;
						}else if(kwIndex == 'GENERATOR'){
							c = 18;
						}else if(kwIndex == 'SINGLE HEAT'){
							c = 20;
						}else if(kwIndex == 'DUAL HEAT'){
							c = 22;
						}
						else if(kwIndex == 'STORAGE WATER HEATER'){
							c = 24;
						}
						else if(kwIndex == 'STORAGE HEAT'){
							c = 26;
						}
						else if(kwIndex == 'ELECTRIC VEHICLE CHARGER'){
							c = 28;
						}
						else if(kwIndex == 'ELECTRIC VEHICLE CHARGER STORAGE'){
							c = 30;
						}
						if(res.data.powerAvailable > 1000000000){
							groupData.setCell(r, c, kwValue / 1000000000, kwValue / 1000000000 + ' GW');
						}else if(res.data.powerAvailable > 1000000){
							groupData.setCell(r, c, kwValue / 1000000, kwValue / 1000000 + ' MW');
						}else if(res.data.powerAvailable > 1000){
							groupData.setCell(r, c, kwValue / 1000, kwValue / 1000 + ' kW');
						}else{
							groupData.setCell(r, c, kwValue, kwValue + ' W');
						}
						groupKw = groupKw + kwValue;
					});
					
					// Group Power
					if(res.data.powerAvailable > 1000000000){
						groupData.setCell(r, 2, groupKw / 1000000000, groupKw / 1000000000 + ' GW');
					}else if(res.data.powerAvailable > 1000000){
						groupData.setCell(r, 2, groupKw / 1000000, groupKw / 1000000 + ' MW');
					}else if(res.data.powerAvailable > 1000){
						groupData.setCell(r, 2, groupKw / 1000, groupKw / 1000 + ' kW');
					}else{
						groupData.setCell(r, 2, groupKw, groupKw + ' W');
					}
					
					// Count by Device Type
					$.each(value.deviceCountByDeviceTypeID, function(countIndex, countValue){
						c=0;
						if(countIndex == 'TSTAT'){
							c = 3;
						}else if(countIndex == 'WH'){
							c = 5;
						}else if(countIndex == 'PP'){
							c = 7;
						}else if(countIndex == 'EV'){
							c = 9;
						}else if(countIndex == 'IRRIGATION PUMP'){
							c = 11;
						}else if(countIndex == 'AC SWITCH'){
							c = 13;
						}else if(countIndex == 'CROP HEAT'){
							c = 15;
						}else if(countIndex == 'GENERATOR'){
							c = 17;
						}else if(countIndex == 'SINGLE HEAT'){
							c = 19;
						}else if(countIndex == 'DUAL HEAT'){
							c = 21;
						}
						else if(countIndex == 'STORAGE WATER HEATER'){
							c = 23;
						}
						else if(countIndex == 'STORAGE HEAT'){
							c = 25;
						}
						else if(countIndex == 'ELECTRIC VEHICLE CHARGER'){
							c = 27;
						}
						else if(countIndex == 'ELECTRIC VEHICLE CHARGER STORAGE'){
							c = 29;
						}
						if(c>0)groupData.setCell(r, c, countValue, countValue + ' Devices');
					});
					
					r++;
				});
				if(res.data.powerAvailable > 1000000000){
					var formatter = new google.visualization.NumberFormat({ pattern: '#,###.#####', suffix: ' GW' });
					var vTitle = 'Power by Group (GW)';
				}else if(res.data.powerAvailable > 1000000){
					var formatter = new google.visualization.NumberFormat({ pattern: '#,###.####', suffix: ' MW' });
					var vTitle = 'Power by Group (MW)';
				}else if(res.data.powerAvailable > 1000){
					var formatter = new google.visualization.NumberFormat({ pattern: '#,###.###', suffix: ' kW' });
					var vTitle = 'Power by Group (kW)';
				}else{
					var formatter = new google.visualization.NumberFormat({ pattern: '#,###', suffix: ' W' });
					var vTitle = 'Power by Group (W)';
				}
				formatter.format(groupData, 1);
				formatter.format(groupData, 2);
				formatter.format(groupData, 4);
				formatter.format(groupData, 6);
				formatter.format(groupData, 8);
				formatter.format(groupData, 10);
				formatter.format(groupData, 12);
				formatter.format(groupData, 14);
				formatter.format(groupData, 16);
				formatter.format(groupData, 18);
				formatter.format(groupData, 20);
				formatter.format(groupData, 22);
				formatter.format(groupData, 24);
				formatter.format(groupData, 26);
				formatter.format(groupData, 28);
				formatter.format(groupData, 30);
				var dashboard = new google.visualization.Dashboard(document.getElementById('device_dashboard'));

				// Power filters
				var comboRangeSlider = new google.visualization.ControlWrapper({
				  'controlType': 'NumberRangeFilter',
				  'containerId': 'kwFilter_group',
				  'options': {
					'filterColumnLabel': 'Group Power'
				  }
				});
				var tstatRangeSlider = new google.visualization.ControlWrapper({
				  'controlType': 'NumberRangeFilter',
				  'containerId': 'tstatFilter_group',
				  'options': {
					'filterColumnLabel': 'TSTAT Power',
					'ui': {
						'selectedValuesLayout': 'below'
					}
				  }
				});
				var whRangeSlider = new google.visualization.ControlWrapper({
				  'controlType': 'NumberRangeFilter',
				  'containerId': 'whFilter_group',
				  'options': {
					'filterColumnLabel': 'WH Power'
				  }
				});
				var ppRangeSlider = new google.visualization.ControlWrapper({
				  'controlType': 'NumberRangeFilter',
				  'containerId': 'ppFilter_group',
				  'options': {
					'filterColumnLabel': 'PP Power'
				  }
				});
				var ipRangeSlider = new google.visualization.ControlWrapper({
				  'controlType': 'NumberRangeFilter',
				  'containerId': 'ipFilter_group',
				  'options': {
					'filterColumnLabel': 'IRRIGATION PUMP Power'
				  }
				});
				var evRangeSlider = new google.visualization.ControlWrapper({
				  'controlType': 'NumberRangeFilter',
				  'containerId': 'evFilter_group',
				  'options': {
					'filterColumnLabel': 'EV Power'
				  }
				});
				var acRangeSlider = new google.visualization.ControlWrapper({
				  'controlType': 'NumberRangeFilter',
				  'containerId': 'acFilter_group',
				  'options': {
					'filterColumnLabel': 'AC SWITCH Power'
				  }
				});
				var chRangeSlider = new google.visualization.ControlWrapper({
				  'controlType': 'NumberRangeFilter',
				  'containerId': 'chFilter_group',
				  'options': {
					'filterColumnLabel': 'CROP HEAT Power'
				  }
				});
				var genRangeSlider = new google.visualization.ControlWrapper({
				  'controlType': 'NumberRangeFilter',
				  'containerId': 'genFilter_group',
				  'options': {
					'filterColumnLabel': 'GENERATOR Power'
				  }
				});
				var shRangeSlider = new google.visualization.ControlWrapper({
				  'controlType': 'NumberRangeFilter',
				  'containerId': 'shFilter_group',
				  'options': {
					'filterColumnLabel': 'SINGLE HEAT Power'
				  }
				});
				var dhRangeSlider = new google.visualization.ControlWrapper({
				  'controlType': 'NumberRangeFilter',
				  'containerId': 'dhFilter_group',
				  'options': {
					'filterColumnLabel': 'DUAL HEAT Power'
				  }
				});
				var swhRangeSlider = new google.visualization.ControlWrapper({
					  'controlType': 'NumberRangeFilter',
					  'containerId': 'swhFilter_group',
					  'options': {
						'filterColumnLabel': 'STORAGE WATER HEATER Power'
					  }
					});
				var sthRangeSlider = new google.visualization.ControlWrapper({
					  'controlType': 'NumberRangeFilter',
					  'containerId': 'sthFilter_group',
					  'options': {
						'filterColumnLabel': 'STORAGE HEAT Power'
					  }
					});
				var evcRangeSlider = new google.visualization.ControlWrapper({
					  'controlType': 'NumberRangeFilter',
					  'containerId': 'evcFilter_group',
					  'options': {
						'filterColumnLabel': 'ELECTRIC VEHICLE CHARGER Power'
					  }
					});
				var evcsRangeSlider = new google.visualization.ControlWrapper({
					  'controlType': 'NumberRangeFilter',
					  'containerId': 'evcsFilter_group',
					  'options': {
						'filterColumnLabel': 'ELECTRIC VEHICLE CHARGER STORAGE Power'
					  }
					});
				
				// Count Filters
				var tstatCount = new google.visualization.ControlWrapper({
				  'controlType': 'CategoryFilter',
				  'containerId': 'tstatFilter_count',
				  'options': {
					'filterColumnLabel': 'TSTAT Count'
				  }
				});
				var whCount = new google.visualization.ControlWrapper({
				  'controlType': 'CategoryFilter',
				  'containerId': 'whFilter_count',
				  'options': {
					'filterColumnLabel': 'WH Count'
				  }
				});
				var ppCount = new google.visualization.ControlWrapper({
				  'controlType': 'CategoryFilter',
				  'containerId': 'ppFilter_count',
				  'options': {
					'filterColumnLabel': 'PP Count'
				  }
				});
				var ipCount = new google.visualization.ControlWrapper({
				  'controlType': 'CategoryFilter',
				  'containerId': 'ipFilter_count',
				  'options': {
					'filterColumnLabel': 'IRRIGATION PUMP Count'
				  }
				});
				var evCount = new google.visualization.ControlWrapper({
				  'controlType': 'CategoryFilter',
				  'containerId': 'evFilter_count',
				  'options': {
					'filterColumnLabel': 'EV Count'
				  }
				});
				var acCount = new google.visualization.ControlWrapper({
				  'controlType': 'CategoryFilter',
				  'containerId': 'acFilter_count',
				  'options': {
					'filterColumnLabel': 'AC SWITCH Count'
				  }
				});
				var chCount = new google.visualization.ControlWrapper({
				  'controlType': 'CategoryFilter',
				  'containerId': 'chFilter_count',
				  'options': {
					'filterColumnLabel': 'CROP HEAT Count'
				  }
				});
				var genCount = new google.visualization.ControlWrapper({
				  'controlType': 'CategoryFilter',
				  'containerId': 'genFilter_count',
				  'options': {
					'filterColumnLabel': 'GENERATOR Count'
				  }
				});
				var shCount = new google.visualization.ControlWrapper({
				  'controlType': 'CategoryFilter',
				  'containerId': 'shFilter_count',
				  'options': {
					'filterColumnLabel': 'SINGLE HEAT Count'
				  }
				});
				var dhCount = new google.visualization.ControlWrapper({
				  'controlType': 'CategoryFilter',
				  'containerId': 'dhFilter_count',
				  'options': {
					'filterColumnLabel': 'DUAL HEAT Count'
				  }
				});
				var swhCount = new google.visualization.ControlWrapper({
					  'controlType': 'CategoryFilter',
					  'containerId': 'swhFilter_count',
					  'options': {
						'filterColumnLabel': 'STORAGE WATER HEATER Count'
					  }
					});
				var sthCount = new google.visualization.ControlWrapper({
					  'controlType': 'CategoryFilter',
					  'containerId': 'sthFilter_count',
					  'options': {
						'filterColumnLabel': 'STORAGE HEAT Count'
					  }
					});
				var evcCount = new google.visualization.ControlWrapper({
					  'controlType': 'CategoryFilter',
					  'containerId': 'evcFilter_count',
					  'options': {
						'filterColumnLabel': 'ELECTRIC VEHICLE CHARGER Count'
					  }
					});
				var evcsCount = new google.visualization.ControlWrapper({
					  'controlType': 'CategoryFilter',
					  'containerId': 'evcsFilter_count',
					  'options': {
						'filterColumnLabel': 'ELECTRIC VEHICLE CHARGER STORAGE Count'
					  }
					});
				
				// Group name filter
				var comboCategory = new google.visualization.ControlWrapper({
				  'controlType': 'CategoryFilter',
				  'containerId': 'groupFilter',
				  'options': {
					'filterColumnLabel': 'Group'
				  }
				});

				var comboChart = new google.visualization.ChartWrapper({
					'chartType': 'ComboChart',
					'containerId': 'powerByGroup',
					'options': {
						chartArea:{left: 60, top:50, width:'95%',height:'80%'},
						colors: ['#109618', '#3366CC', '#0099C6', '#990099', '#FF9900', '#33CC9B', '#9FCC33','#DB7332','#E9ED2D','#56DDEF','#21BA35','#AAB7B8','#283747','#A04000','#F5B7B1'],
						legend: 'none',
						selectionMode: 'multiple',
						tooltip: {
							trigger: 'selection'
						},
						aggregationTarget: 'category',
						crosshair: { trigger: 'both' },
						vAxis: {title: vTitle},
						backgroundColor: 'transparent',
						isStacked: true,
						seriesType: 'bars',
						series: {
							0: {type: 'line', color:'#109618'},
							1: {type: 'steppedArea'}
						},
						animation:{
							startup: true,
							easing: 'out',
						},
						explorer: {
							actions: ['dragToZoom', 'rightClickToReset']
						}
					},
					'view': { 'columns': [0, 1, 2,4,6,8,12,14,16,18,20,22,24,26,28,30] }
				});

				var table = new google.visualization.ChartWrapper({
					'chartType': 'Table',
					'containerId': 'groupTable',
					'options':{
						allowHtml: true,
						page: 'enable',
						pageSize: 30
					},
					'view': { 'columns': [0,2, 3,4, 5,6, 7,8, 11,12, 13,14, 15,16, 17,18, 19,20, 21,22, 23,24, 25,26, 27,28, 29,30] }
				});
				dashboard.bind([comboCategory, comboRangeSlider, tstatRangeSlider, whRangeSlider, ppRangeSlider, ipRangeSlider, acRangeSlider, chRangeSlider, genRangeSlider, shRangeSlider, dhRangeSlider,swhRangeSlider,sthRangeSlider,evcRangeSlider,evcsRangeSlider, tstatCount, whCount, ppCount, ipCount, acCount, chCount, genCount, shCount, dhCount,swhCount,sthCount,evcCount,evcsCount], [comboChart, table]);

				// Draw the dashboard.
				dashboard.draw(groupData);
				
				// Device Donut Chart
				var deviceData = new google.visualization.DataTable();

				deviceData.addColumn('string', 'Device Type');
				deviceData.addColumn('number', 'kW');

				$.each(res.data.powerAvailByDeviceTypeID, function(index, value){
					var powerValue = value / 1000 == 0 ? .001 : value / 1000;

                    (index != 'EV') ?
                        (index != 'IRRIGATION PUMP') ?
                            deviceData.addRow([index, powerValue]) : deviceData.addRow(['IP', powerValue])
                        : true ;
				});
				var formatter = new google.visualization.NumberFormat({ pattern: '#,###.##', suffix: ' kW' });
				formatter.format(deviceData, 1);

				// Create a pie chart, passing some options
				var pieOptions = {
					chartArea:{top:15,width:'98%',height:'90%'},
					colors: ['#0099C6', '#990099', '#FF9900', '#33CC9B', '#9FCC33','#DB7332','#E9ED2D','#56DDEF','#21BA35','#AAB7B8','#283747','#A04000','#F5B7B1'],
					pieSliceText: 'label',
					legend: 'none',
					pieHole: 0.4,
					backgroundColor: 'transparent',
					animation:{
						startup: true,
						easing: 'out',
					}
				};
				var pie = new google.visualization.PieChart(document.getElementById('powerByDevice'));

				// Draw the dashboard.
				pie.draw(deviceData, pieOptions);
				
				
				// System Power Gauge
				var power = res.data.powerAvailable;
				var powerMax = power * 1.3;
				if(power >= 1000000000){
					power = power / 1000000000;
					powerMax = powerMax / 1000000000;
					var formatter = new google.visualization.NumberFormat({pattern: '#,###.##',suffix:' GW'});
				}else if(power >= 1000000){
					power = power / 1000000;
					powerMax = powerMax / 1000000;
					var formatter = new google.visualization.NumberFormat({pattern: '#,###.##',suffix:' MW'});
				}else if(power >= 1000){
					power = power / 1000;
					powerMax = powerMax / 1000;
					var formatter = new google.visualization.NumberFormat({pattern: '#,###.##',suffix:' kW'});
				}else{
					var formatter = new google.visualization.NumberFormat({pattern: '#,###',suffix:' W'});
				}
				var data = google.visualization.arrayToDataTable([
					['Label', 'Value'],
					['System', power]
				]);
				formatter.format(data, 1)

				var options = {
					width: 500, max: powerMax.toFixed(0),
					redFrom: powerMax.toFixed(2)-(powerMax.toFixed(2) * 0.05), redTo: powerMax.toFixed(2),
					yellowFrom:powerMax.toFixed(2)-(powerMax.toFixed(2) * 0.15), yellowTo: powerMax.toFixed(2)-(powerMax.toFixed(2) * 0.05),
					minorTicks: 5,
					animation:{
						startup: true,
						easing: 'out',
					}
				};

				var chart = new google.visualization.Gauge(document.getElementById('systemPower'));

				chart.draw(data, options);
			}
		}
	});
}

/** * Uncommented ALM-13 Start ** */
function drawSCADA(){				
	// SCADA Power Gauge
	var power = scada.power;
	var threshold = scada.threshold; 
	var powerMax = scada.threshold + (scada.threshold * 0.10);
	var unit = 'W';
	var formatter = new google.visualization.NumberFormat({pattern: '#,###',suffix:' W'});
	
	if(powerMax > 1000000000){
		power = power / 1000000000;
		threshold = threshold / 1000000000;
		powerMax = powerMax / 1000000000;
		unit = 'GW';
		formatter = new google.visualization.NumberFormat({pattern: '#,###.##',suffix:' GW'});
	}else if(powerMax > 1000000){
		power = power / 1000000;
		threshold = threshold / 1000000;
		powerMax = powerMax / 1000000;
		unit = 'MW';
		formatter = new google.visualization.NumberFormat({pattern: '#,###.##',suffix:' MW'});
	}else if(powerMax > 1000){
		power = power / 1000;
		threshold = threshold / 1000;
		powerMax = powerMax / 1000;
		unit = 'kW';
		formatter = new google.visualization.NumberFormat({pattern: '#,###.##',suffix:' kW'});
	}
	
	// Round values
	powerMax = powerMax.toFixed(2);
	threshold = threshold.toFixed(2);
	
	var chartsData = {};
	chartsData.gauge = {};
	chartsData.gauge.data = new google.visualization.DataTable();
	chartsData.gauge.data.addColumn('string', 'Label');
	chartsData.gauge.data.addColumn('number', 'Value');
	chartsData.gauge.data.addRows(3);
	chartsData.gauge.data.setValue(0, 0, 'SCADA');
	chartsData.gauge.data.setValue(0, 1, power);
	
	formatter.format(chartsData.gauge.data, 1);
	
	chartsData.gauge.chart = new google.visualization.Gauge(document.getElementById('scadaPower'));
		
	chartsData.gauge.options = {
		height: 160,
		max: powerMax,
		greenFrom: powerMax / 2,
		greenTo: threshold - (threshold * 0.05),
		yellowFrom: threshold - (threshold * 0.05),
		yellowTo: threshold,
		redFrom: threshold,
		redTo: powerMax,
		minorTicks: 5,
		animation:{
			startup: true
		}
	};
	
	chartsData.gauge.chart.draw(chartsData.gauge.data, chartsData.gauge.options);
	
	var color = '#000000';
	if(power >= threshold){
		color = '#DC3912';
	}else if(power < threshold && power >= (threshold - (threshold * 0.05))){
		color = '#FF9900';
	}else if(power < (threshold - (threshold * 0.05)) && power >= (powerMax / 2)){
		color = '#109618';
	}	
	var readingColor = '#0095CF';
	if(scada.missed > 0){
		readingColor = '#DC3912';
	}
	var missColor = '#000000';
	if(scada.missed >= scada.limit){
		missColor = '#DC3912';
	}else if(scada.missed < scada.limit && scada.missed > (scada.limit / 2)){
		missColor = '#FF9900';
	}
	
	$('#scadaMissed').html('');
	if(scada.reading){
		$('#scadaReading').html('Reading: <span style="color:' + readingColor + '">' + scada.reading + '</span>');
		$('#scadaThreshold').html('Threshold: <span style="color:' + color + '">' + threshold + unit + '</span>');
		if(scada.missed > 0){
			$('#scadaMissed').html('Failed: <span style="color:' + missColor + '">' + scada.missed + '</span> / ' + scada.limit);
		}
	}else{
		var readingError = 'A valid read has never been captured.';
		$('#scadaReading').html('<span style="color:#DC3912">' + readingError + '</span>');
		if(scada.missed > 0){
			$('#scadaMissed').html('Failed: <span style="color:' + missColor + '">' + scada.missed + '</span> / ' + scada.limit);
		}
	}
}

function alertSCADA(){
	var $gauge = $('#scadaPower');
	var $alert = $('<p />').addClass('error').css('width',160).html('There is an issue with the SCADA feed and the number of failed reads has reached the maximum allowed (' + scada.limit + ').');
	$('<button />').addClass('btn btn-block btn-blue btn-small').html('<span class="fa fa-cogs"></span> Edit Settings').click(function(){
		window.location = (Consert.ctxPath || '') + "/settings/index";
	}).appendTo( $alert );
	if(scada.reading){
		$('<button />').addClass('btn btn-block btn-orange btn-small').html('<span class="fa fa-dashboard"></span> Show Last').click(function(){
			drawSCADA();
		}).appendTo( $alert );
	}
	
	$gauge.html( $alert );
}

function timerSCADA(){
	$('#scadaTimer').animate({width: 0}, scada.interval * 1000, function(){
		initSCADA();
	});	
}

function initSCADA(){
	$.ajax({
		url: url.scada,
		dataType:"json",
		async: true,
		success: function(res){
			if(res.success){
				var data = jQuery.parseJSON(res.data);				
				if(!$.isEmptyObject(res.data)){					
					var offset = $('#systemTime').data('tzOffset').replace(':00','');
					var reading = (typeof data.reading != "undefined" ? moment(data.reading).format('MMM DD, YYYY hh:mma') : false);
					
					scada = {
						reading: reading,
						power: parseInt(data.power),
						threshold: parseInt(data.threshold),
						limit: parseInt(data.limit),
						missed: parseInt(data.missed),
						interval: parseInt(data.interval)
					};					
					console.log("reading:"+scada.reading+",power:"+scada.power+",threshold:"+scada.threshold+",limit:"+scada.limit+",missed:"+scada.missed+",interval"+scada.interval);									
					getSCADA();
					
					$('#scadaTimer').animate({width: $('#scadaTimerWrapper').width()}, 100, function(){
						timerSCADA();
					});
						
					$(window).on('beforeunload', function() {
						if(!saving && saveInit){
							return "Changes have been made that will not be saved if you leave.";
						}
					});
				}
			}
		},
		error: function(err){
			console.error(err);
		}
	});
}

function getSCADA(){
	if(scada.missed >= scada.limit || !scada){
		drawSCADA();
		alertSCADA();
	}else if(scada.missed > 0 && scada.missed < scada.limit){
		scada.missed++;
		drawSCADA();
	
		setTimeout(function(){
			initSCADA();
		}, scada.interval * 1000);
	}else{
		drawSCADA();
	}
}
/** * Uncommented ALM-13 End ** */
$(window).resize(function(){
	drawDashboards();
});